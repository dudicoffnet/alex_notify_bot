import asyncio
import logging
import os
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "123456789"))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone="Europe/Minsk")

def generate_pdf():
    filename = "report.pdf"
    c = canvas.Canvas(filename, pagesize=letter)
    c.setFont("Helvetica", 14)
    c.drawString(100, 750, "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç")
    c.setFont("Helvetica", 10)
    c.drawString(100, 730, f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    # –ñ–∏–≤—ã–µ –±–ª–æ–∫–∏ ‚Äî –ø—Ä–∏–º–µ—Ä—ã
    c.drawString(100, 710, "üöó MercedesScanBot ‚Äî –∞–∫—Ç–∏–≤–µ–Ω")
    c.drawString(100, 695, "üìä –§–∏–Ω–∞–Ω—Å—ã ‚Äî –∫—É—Ä—Å BYN/USD –æ–±–Ω–æ–≤–ª—ë–Ω")
    c.drawString(100, 680, "‚úàÔ∏è –§—É–∫—É–æ–∫ ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–ª–µ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    c.drawString(100, 665, "üí∞ –ö—Ä–∏–ø—Ç–æ ‚Äî —Å–≤–µ–∂–∏–µ –º–∏—Å—Å–∏–∏ —Å–æ–±—Ä–∞–Ω—ã")
    c.drawString(100, 650, "üè† –î–æ–º ‚Äî –Ω–æ–≤–æ—Å—Ç–∏ –æ —Å–Ω–æ—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")

    c.showPage()
    c.save()
    return filename

def generate_zip():
    import zipfile
    filename = "project.zip"
    with zipfile.ZipFile(filename, "w") as zipf:
        for f in ["main.py", "requirements.txt", "Procfile", ".env.example", "README.txt"]:
            if os.path.exists(f):
                zipf.write(f)
    return filename

async def send_pdf():
    pdf = generate_pdf()
    await bot.send_document(ADMIN_ID, types.FSInputFile(pdf), caption="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π PDF-–æ—Ç—á—ë—Ç")

async def send_zip():
    zf = generate_zip()
    await bot.send_document(ADMIN_ID, types.FSInputFile(zf), caption="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π ZIP-–∞—Ä—Ö–∏–≤")

@dp.message(Command("force"))
async def cmd_force(message: types.Message):
    pdf = generate_pdf()
    await message.answer_document(types.FSInputFile(pdf), caption="PDF-–æ—Ç—á—ë—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ /force")
    zf = generate_zip()
    await message.answer_document(types.FSInputFile(zf), caption="ZIP –ø–æ –∫–æ–º–∞–Ω–¥–µ /force")

async def heartbeat():
    try:
        await bot.get_me()
        logging.info("Heartbeat OK")
    except Exception as e:
        logging.error(f"Heartbeat error: {e}")

async def main():
    scheduler.add_job(send_pdf, "cron", hour=10, minute=0)   # –£—Ç—Ä–µ–Ω–Ω–∏–π PDF
    scheduler.add_job(send_pdf, "cron", hour=23, minute=0)   # –í–µ—á–µ—Ä–Ω–∏–π PDF
    scheduler.add_job(heartbeat, "interval", minutes=5)
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
