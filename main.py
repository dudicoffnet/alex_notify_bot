import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums import ParseMode
from aiogram.fsm.strategy import FSMStrategy
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command

router = Router()
router_sendzip = Router()

@router.message(F.text == "/start")
async def start_handler(message: Message):
    await message.answer("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –Ø –≥–æ—Ç–æ–≤ –ø—Ä–∏—Å—ã–ª–∞—Ç—å ZIP –∏ PDF –ø–æ —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–µ.")

@router.message(F.text == "/ping")
async def ping_handler(message: Message):
    await message.answer("üî¥ –Ø –Ω–∞ —Å–≤—è–∑–∏.")

@router.message(F.text == "/reportpdf")
async def report_handler(message: Message):
    try:
        file = FSInputFile("storage/daily_report.pdf")
        await message.answer_document(file, caption="üóÇ –¢–≤–æ–π —Å–≤–µ–∂–∏–π –æ—Ç—á—ë—Ç")
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å PDF: {e}")

@router_sendzip.message(Command("sendzip"))
async def sendzip_handler(message: Message):
    path = "storage/alex_notify_bot_v12_payload.zip"
    try:
        file = FSInputFile(path)
        await message.answer_document(file, caption="üì¶ –õ–æ–≤–∏ ZIP")
    except Exception as e:
        await message.answer(f"ZIP –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {e}")

async def main():
    logging.basicConfig(level=logging.INFO)
    bot = Bot(token=os.getenv("BOT_TOKEN"), parse_mode=ParseMode.HTML)
    dp = Dispatcher(fsm_strategy=FSMStrategy.CHAT)
    dp.include_router(router)
    dp.include_router(router_sendzip)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
