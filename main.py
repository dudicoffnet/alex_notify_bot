
import asyncio
import httpx
import os
from datetime import datetime
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

import zipfile

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("ADMIN_ID")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
pdfmetrics.registerFont(TTFont("DejaVuSans", "DejaVuSans.ttf"))

async def send_file(file_path, caption):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendDocument"
    with open(file_path, "rb") as f:
        files = {"document": (file_path, f)}
        data = {"chat_id": CHAT_ID, "caption": caption}
        async with httpx.AsyncClient() as client:
            await client.post(url, data=data, files=files)

def generate_pdf(report_type="–£—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á—ë—Ç"):
    path = "report.pdf"
    c = canvas.Canvas(path, pagesize=A4)
    width, height = A4
    c.setFont("DejaVuSans", 16)
    c.drawString(50, height - 50, f"{report_type} ‚Äî {datetime.now().strftime('%d.%m.%Y %H:%M')}")
    c.setFont("DejaVuSans", 12)

    # –¢—Ä–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–ª–æ–∫–∞
    c.drawString(50, height - 100, "üè† –°–Ω–æ—Å –¥–æ–º–∞ (—É–ª. –ú–∏—Ä–Ω–∞—è, 32, –ú–∏–Ω—Å–∫):")
    c.drawString(70, height - 120, "‚Ä¢ –î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç / –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥—Ç—è–Ω—É—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

    c.drawString(50, height - 160, "‚úàÔ∏è –§—É–∫—É–æ–∫ (–ø–µ—Ä–µ–ª—ë—Ç—ã, –∂–∏–ª—å—ë, –±–∞–π–∫, –µ–¥–∞, –≤–∏–∑—ã):")
    c.drawString(70, height - 180, "‚Ä¢ –î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç / –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥—Ç—è–Ω—É—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

    c.drawString(50, height - 220, "üí∞ –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–∞—Ä–∞–±–æ—Ç–∫–∏ –∏ –Ω–æ–≤—ã–µ —Å—Ö–µ–º—ã:")
    c.drawString(70, height - 240, "‚Ä¢ –î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç / –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥—Ç—è–Ω—É—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

    c.drawString(50, 50, "üß† –û—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–æ—Ç–æ–º-—É–≤–µ–¥–æ–º–∏—Ç–µ–ª–µ–º")
    c.save()
    return path

async def handle_force():
    pdf = generate_pdf("–û—Ç—á—ë—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É (/force)")
    await send_file(pdf, "üìÑ –û—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ")

async def listen_for_force():
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
    offset = 0
    while True:
        async with httpx.AsyncClient() as client:
            r = await client.get(url, params={"offset": offset + 1})
            updates = r.json().get("result", [])
            for update in updates:
                offset = update["update_id"]
                if "message" in update:
                    text = update["message"].get("text", "")
                    chat = str(update["message"]["chat"]["id"])
                    if text.strip() == "/force" and chat == CHAT_ID:
                        await handle_force()
        await asyncio.sleep(5)

async def scheduler():
    while True:
        now = datetime.now().strftime("%H:%M")
        if now == "10:00":
            pdf = generate_pdf("–£—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á—ë—Ç")
            await send_file(pdf, "üìÑ –£—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á—ë—Ç")
        elif now == "23:00":
            pdf = generate_pdf("–í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç")
            await send_file(pdf, "üìÑ –í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç")
        await asyncio.sleep(60)

async def main():
    await asyncio.gather(
        scheduler(),
        listen_for_force()
    )

if __name__ == "__main__":
    asyncio.run(main())
