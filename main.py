
import asyncio
import httpx
import os
from datetime import datetime
import zipfile

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("ADMIN_ID")

REPORT_NAME = "report.txt"

def build_report(title="–û—Ç—á—ë—Ç"):
    now = datetime.now().strftime("%d.%m.%Y %H:%M")
    lines = [
        f"{title} ‚Äî {now}",
        "",
        "üè† –°–Ω–æ—Å –¥–æ–º–∞ (—É–ª. –ú–∏—Ä–Ω–∞—è, 32, –ú–∏–Ω—Å–∫):",
        "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è: (–ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –¥–æ–±–∞–≤–ª—é –ø–æ –º–µ—Ä–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è)",
        "",
        "‚úàÔ∏è –§—É–∫—É–æ–∫ (–ø–µ—Ä–µ–ª—ë—Ç—ã, –∂–∏–ª—å—ë, –±–∞–π–∫, –µ–¥–∞, –≤–∏–∑—ã):",
        "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è: (–ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –¥–æ–±–∞–≤–ª—é –ø–æ –º–µ—Ä–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è)",
        "",
        "üí∞ –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–∞—Ä–∞–±–æ—Ç–∫–∏ –∏ –Ω–æ–≤—ã–µ —Å—Ö–µ–º—ã:",
        "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è: (–ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –¥–æ–±–∞–≤–ª—é –ø–æ –º–µ—Ä–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è)",
        "",
        "‚Äî –û—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–æ—Ç–æ–º-—É–≤–µ–¥–æ–º–∏—Ç–µ–ª–µ–º."
    ]
    with open(REPORT_NAME, "w", encoding="utf-8") as f:
        f.write("\n".join(lines))
    return REPORT_NAME

def make_backup():
    name = "backup.zip"
    with zipfile.ZipFile(name, "w") as z:
        for fn in os.listdir("."):
            if fn.endswith(".py") or fn.endswith(".txt"):
                z.write(fn)
    return name

async def tg_send_file(path, caption):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendDocument"
    with open(path, "rb") as f:
        files = {"document": (path, f)}
        data = {"chat_id": CHAT_ID, "caption": caption}
        async with httpx.AsyncClient(timeout=30) as client:
            await client.post(url, data=data, files=files)

async def handle_force():
    txt = build_report("–û—Ç—á—ë—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É (/force)")
    await tg_send_file(txt, "üìÑ –û—Ç—á—ë—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ /force")
    zip_path = make_backup()
    await tg_send_file(zip_path, "üì¶ –¶–µ–ª–µ–≤–æ–π –∞—Ä—Ö–∏–≤ (force)")

async def listen_updates():
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
    offset = 0
    while True:
        try:
            async with httpx.AsyncClient(timeout=30) as client:
                r = await client.get(url, params={"offset": offset + 1, "timeout": 25})
                for u in r.json().get("result", []):
                    offset = u["update_id"]
                    msg = u.get("message") or {}
                    text = (msg.get("text") or "").strip()
                    chat_id = str((msg.get("chat") or {}).get("id", ""))
                    if text == "/force" and chat_id == CHAT_ID:
                        await handle_force()
        except Exception:
            pass
        await asyncio.sleep(2)

async def scheduler():
    while True:
        now = datetime.now().strftime("%H:%M")
        if now == "10:00":
            txt = build_report("–£—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á—ë—Ç")
            await tg_send_file(txt, "üìÑ –£—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á—ë—Ç (TXT)")
        elif now == "23:00":
            txt = build_report("–í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç")
            await tg_send_file(txt, "üìÑ –í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç (TXT)")
        await asyncio.sleep(60)

async def main():
    await asyncio.gather(scheduler(), listen_updates())

if __name__ == "__main__":
    asyncio.run(main())
