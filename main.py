
from aiogram import Bot, Dispatcher, F
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, FSInputFile
from aiogram import Router
import asyncio
import os
from datetime import datetime, time
from zoneinfo import ZoneInfo
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from dotenv import load_dotenv
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas

# === ENV ===
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# === CORE ===
TZ = ZoneInfo("Europe/Minsk")
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)
scheduler = AsyncIOScheduler(timezone=TZ)

SCHEDULE_FILE = "schedule.json"
LOG_FILE = "logs.txt"

def log(msg: str):
    try:
        with open(LOG_FILE, "a", encoding="utf-8") as f:
            now = datetime.now(TZ).strftime("%Y-%m-%d %H:%M:%S")
            f.write(f"[{now}] {msg}\n")
    except Exception:
        pass

def load_schedule():
    # default times
    schedule = {"morning": "10:00", "evening": "23:00"}
    if os.path.exists(SCHEDULE_FILE):
        try:
            import json
            with open(SCHEDULE_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                schedule.update({k:v for k,v in data.items() if k in ("morning","evening")})
        except Exception:
            pass
    return schedule

def save_schedule(schedule: dict):
    import json
    with open(SCHEDULE_FILE, "w", encoding="utf-8") as f:
        json.dump(schedule, f, ensure_ascii=False, indent=2)

def parse_hhmm(s: str):
    h, m = s.split(":")
    return int(h), int(m)

def build_report_text() -> str:
    now = datetime.now(TZ).strftime("%d.%m.%Y %H:%M")
    lines = [
        f"üóì <b>–û—Ç—á—ë—Ç</b> ‚Äî {now} (–ú–∏–Ω—Å–∫)",
        "",
        "üìå <b>–°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–æ–≤</b>",
        "‚Ä¢ –ë–æ—Ç-—É–≤–µ–¥–æ–º–∏—Ç–µ–ª—å: —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ",
        "‚Ä¢ –§—É–∫—É–æ–∫: –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∏–ª–µ—Ç–æ–≤ ‚Äî –ø–æ–¥–∫–ª—é—á–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ä–µ–ª–∏–∑–µ",
        "‚Ä¢ –ë–æ—Ç ¬´–°–µ–π—á–∞—Å¬ª: –ø–µ—Ä–µ–Ω–æ—Å –¥–æ—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–¥",
        "",
        "üíº <b>–ó–∞–¥–∞—á–∏</b>",
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ-—Ç–∞–π–º–µ—Ä–æ–≤",
        "‚Ä¢ –ì–æ—Ç–æ–≤–∏–º —à–∞–±–ª–æ–Ω—ã –¥–ª—è Canva",
        "",
        "‚öôÔ∏è <i>–ê–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –±–æ—Ç–æ–º-—É–≤–µ–¥–æ–º–∏—Ç–µ–ª–µ–º.</i>"
    ]
    return "\n".join(lines)

async def send_report_text():
    await bot.send_message(ADMIN_ID, build_report_text())

def build_pdf(path: str):
    c = canvas.Canvas(path, pagesize=A4)
    width, height = A4
    y = height - 50
    c.setFont("Helvetica-Bold", 16)
    c.drawString(50, y, "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç")
    y -= 20
    c.setFont("Helvetica", 10)
    c.drawString(50, y, f"–î–∞—Ç–∞/–≤—Ä–µ–º—è: {datetime.now(TZ).strftime('%d.%m.%Y %H:%M')} (Europe/Minsk)")
    y -= 30
    sections = [
        ("–°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–æ–≤", [
            "–ë–æ—Ç-—É–≤–µ–¥–æ–º–∏—Ç–µ–ª—å: —Ä–∞–±–æ—Ç–∞–µ—Ç",
            "–§—É–∫—É–æ–∫: –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∏–ª–µ—Ç–æ–≤ ‚Äî –≤ –ø–ª–∞–Ω–∞—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
            "–ë–æ—Ç ¬´–°–µ–π—á–∞—Å¬ª: –ø—Ä–æ–¥-–≤–µ—Ä—Å–∏—è, –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã"
        ]),
        ("–ó–∞–¥–∞—á–∏ –Ω–∞ –¥–µ–Ω—å", [
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ-—Ç–∞–π–º–µ—Ä–æ–≤ (10:00 / 23:00)",
            "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —Ä–æ–ª–∏–∫–æ–≤"
        ]),
        ("–ü—Ä–∏–º–µ—á–∞–Ω–∏—è", [
            "–û—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–æ—Ç–æ–º."
        ])
    ]
    for title, items in sections:
        c.setFont("Helvetica-Bold", 12)
        c.drawString(50, y, title)
        y -= 18
        c.setFont("Helvetica", 10)
        for it in items:
            c.drawString(60, y, f"‚Ä¢ {it}")
            y -= 14
        y -= 10
        if y < 80:
            c.showPage()
            y = height - 50
    c.showPage()
    c.save()

async def send_report_pdf():
    path = "report.pdf"
    build_pdf(path)
    await bot.send_document(ADMIN_ID, FSInputFile(path))

def reschedule_jobs():
    # Remove existing jobs
    for job in list(scheduler.get_jobs()):
        job.remove()
    schedule = load_schedule()
    h1, m1 = parse_hhmm(schedule["morning"])
    h2, m2 = parse_hhmm(schedule["evening"])
    scheduler.add_job(send_report_text, CronTrigger(hour=h1, minute=m1))
    scheduler.add_job(send_report_text, CronTrigger(hour=h2, minute=m2))
    scheduler.start()
    log(f"Rescheduled: morning {schedule['morning']}, evening {schedule['evening']}")

# === HANDLERS ===
@router.message(F.text == "/start")
async def h_start(message: Message):
    await message.answer("‚úÖ –ë–æ—Ç-—É–≤–µ–¥–æ–º–∏—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω. –ö–æ–º–∞–Ω–¥—ã: /ping, /report, /pdfreport, /testnow, /settime HH:MM HH:MM, /backup, /health")

@router.message(F.text == "/ping")
async def h_ping(message: Message):
    await message.answer("üèì –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.")

@router.message(F.text == "/report")
async def h_report(message: Message):
    await send_report_text()

@router.message(F.text == "/pdfreport")
async def h_pdf(message: Message):
    await send_report_pdf()
    await message.answer("üìÑ PDF-–æ—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

@router.message(F.text == "/testnow")
async def h_testnow(message: Message):
    await send_report_text()

@router.message(F.text.startswith("/settime"))
async def h_settime(message: Message):
    try:
        parts = message.text.split()
        if len(parts) != 3:
            await message.answer("–§–æ—Ä–º–∞—Ç: /settime 09:30 22:15")
            return
        morning, evening = parts[1], parts[2]
        # basic validation
        parse_hhmm(morning); parse_hhmm(evening)
        save_schedule({"morning": morning, "evening": evening})
        reschedule_jobs()
        await message.answer(f"‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: —É—Ç—Ä–æ {morning}, –≤–µ—á–µ—Ä {evening}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä: /settime 09:30 22:15\n–î–µ—Ç–∞–ª–∏: {e}")

@router.message(F.text == "/backup")
async def h_backup(message: Message):
    import zipfile
    paths = []
    for p in ("schedule.json", "README.txt", "requirements.txt", "Procfile"):
        if os.path.exists(p):
            paths.append(p)
    # –Ω–µ –≤–∫–ª—é—á–∞–µ–º .env, —á—Ç–æ–±—ã –Ω–µ —É—Ç–µ–∫–ª–∏ —Å–µ–∫—Ä–µ—Ç—ã
    zname = "backup.zip"
    with zipfile.ZipFile(zname, "w") as z:
        for p in paths:
            z.write(p, arcname=p)
    await bot.send_document(ADMIN_ID, FSInputFile(zname))
    await message.answer("üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (–±–µ–∑ .env).")

@router.message(F.text == "/health")
async def h_health(message: Message):
    schedule = load_schedule()
    jobs = scheduler.get_jobs()
    nexts = []
    for j in jobs:
        try:
            nexts.append(str(j.next_run_time.astimezone(TZ)))
        except Exception:
            nexts.append("‚Äî")
    text = (
        "ü©∫ <b>–°—Ç–∞—Ç—É—Å</b>\n"
        f"‚Ä¢ TOKEN: {'OK' if TOKEN else 'EMPTY'}\n"
        f"‚Ä¢ ADMIN_ID: {ADMIN_ID}\n"
        f"‚Ä¢ TZ: Europe/Minsk\n"
        f"‚Ä¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: —É—Ç—Ä–æ {schedule.get('morning')}, –≤–µ—á–µ—Ä {schedule.get('evening')}\n"
        f"‚Ä¢ –ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–¥–∞–Ω–∏—è: {', '.join(nexts) if nexts else '–Ω–µ—Ç'}\n"
        "‚Ä¢ –õ–æ–≥–∏: –ø–∏—à—É—Ç—Å—è –≤ logs.txt"
    )
    await message.answer(text)

async def main():
    # ensure defaults exist
    if not os.path.exists(SCHEDULE_FILE):
        save_schedule(load_schedule())
    reschedule_jobs()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
